// Program 4: Solution for Coloroid, color-matching game
//       This program uses a class square to create and store and be used in the gameplay.
//       Detail od every elemnt and the function used in the game can be found next to them.
//       Game starts at 4x4 and goes up to 24x24, player has twice the squres at a row (8 for the first level)
//       to win and level up.    GOOD LUCK PLAYING :)
//         
// Author: Nick Wolf  - nwolf6
// System: C++ on cloud-based Codio.com 

/***Mallavarapu:
 * Style:
 * (1) entire student code is in main , and many blocks repeat: Use functions
 * 
 * Execution:
 * (1) Good job
 * ***/
#include <SFML/Graphics.hpp> // Needed to access all the SFML graphics libraries
#include <iostream>          // Since we are using multiple libraries
#include <cstdio>            // For sprintf, "printing" to a string
#include <cstring>           // For c-string functions such as strlen()      

const int WindowXSize = 400;
const int WindowYSize = 500;
const int MaxBoardSize = 24;  // Max number of squares per side


//---------------------------------------------------------------------------------------
class Square {
	public:
		// Default Constructor 
		Square()
		{
			size = 0;                    // size of the square 
			xPosition = 0;               // x position of top left of each square (0 for the first one)
			yPosition = 0;               // y position of top left of each square (0 for the first one)
			color = sf::Color::Black;    // color of the square, intilally randomized, using SFML/Graphics
			isVisible = false;           // to show the suare in the game, by defalt false
			isCaptured = false;          // to check if color change is needed, by defult not captured
			text = "";		               // extra element for debugging
		}
	
		// Fully-qualified constructor, used to set all fields
		Square( int theSize, int theXPosition, int theYPosition, 
					  const sf::Color &theColor, bool theVisibility, bool isCaptured, std::string theText)
		{
			// Set the class fields
			size = theSize;
			xPosition = theXPosition;
			yPosition = theYPosition;
			color = theColor;
			isVisible = theVisibility;
			isCaptured = this->isCaptured;   // By default squares have not been captured
			text = theText;
			// Use the values to set the display characteristics of theSquare
			theSquare.setSize( sf::Vector2f(theSize, theSize));
			theSquare.setPosition( theXPosition, theYPosition);   // Set the position of the square
			theSquare.setFillColor( theColor);
		}
			
		// Get (accessor) functions
		sf::RectangleShape getTheSquare() { return theSquare; }
		int getSize() { return size; }
		int getXPosition() { return xPosition; }
		int getYPosition() { return yPosition; }
		sf::Color& getColor() { return color; }
		bool getIsVisible() { return isVisible; }
		bool getIsCaptured() { return isCaptured; }
		std::string getText() { return text; }
	
		// Set (mutator) functions
		void setSize( int theSize) { 
			size = theSize; 
			theSquare.setSize( sf::Vector2f(theSize, theSize));
		}
		void setXPosition( int theXPosition) { 
				xPosition = theXPosition; 
				theSquare.setPosition( theXPosition, yPosition);   // Set the position of the square
		}
		void setYPosition( int theYPosition) { 
				yPosition = theYPosition; 
				theSquare.setPosition( xPosition, theYPosition);   // Set the position of the square
		}
		void setColor( sf::Color & theColor) { 
				color = theColor; 
				theSquare.setFillColor( theColor);    // Also update the color on the square itself
		}
		void setVisibility( bool theVisibility) { isVisible = theVisibility; }
		void setIsCaptured( bool isCaptured) { this->isCaptured = isCaptured; }
		void setText( std::string theText) { text = theText; }

		// Utility functions
		void displayText( sf::RenderWindow *pWindow, sf::Font theFont, sf::Color theColor, int textSize);
	
	private:
		int size;
		int xPosition;
		int yPosition;
		sf::Color color;
		bool isVisible;
		bool isCaptured;   // Indicates whether or not it is part of the captured area
		std::string text;
		sf::RectangleShape theSquare;

}; //end class Square


//---------------------------------------------------------------------------------------
// Initialize the font
void initializeFont( sf::Font &theFont)
{
		// Create the global font object from the font file
		if (!theFont.loadFromFile("arial.ttf"))
		{
			 std::cout << "Unable to load font. " << std::endl;
			 exit( -1);
		}	
}


//---------------------------------------------------------------------------------------
// Get a random number, and use that to return the corresponding color
sf::Color getRandomColor()
{
		sf::Color theColor;
		// Get a random number in the range 0..5
		switch (random()%6 ) {
				case 0: theColor = sf::Color::Black;  break;
				case 1: theColor = sf::Color::Red;    break;
				case 2: theColor = sf::Color::Green;  break;
				case 3: theColor = sf::Color::Blue;   break;
				case 4: theColor = sf::Color::Yellow; break;
				case 5: theColor = sf::Color::Cyan;   break;
				default: std::cout << "Invalid random number, exiting program..." << std::endl;
						exit( -1);
						break;
		}
	return theColor;
}//end getRandomColor()
 
	
//---------------------------------------------------------------------------------------
int main()
{	
		char aString[ 81];    // c-string to hold concatenated output of character literals
	
		// Create and initialize the font, to be used in displaying text.
		sf::Font font;  
		initializeFont( font);
		// Create the destination window
		sf::RenderWindow window(sf::VideoMode(WindowXSize, WindowYSize), "Program 4: Color Match");
		// Create the messages label at the bottom of the screen, to be used in displaying debugging information.
		sf::Text messagesLabel( "", font, 20);
		// Make a text object from the font
		messagesLabel.setColor( sf::Color::White);
		// Place text at the bottom of the window. Position offsets are x,y from 0,0 in upper-left of window
		messagesLabel.setPosition( 0, WindowYSize - messagesLabel.getCharacterSize() - 5);  
		int level = 4;     // level is number of squares per side.  There are level * level number of squares.
		
    // Create array of Square objects to be the max size it will ever be.
		Square squaresArray [MaxBoardSize * MaxBoardSize] ;
    int numberOfMoves = 0;
    bool mouseIsAlreadyPressed = false;
		bool settingUpBoard = true;
    
		// Run the program as long as the window is open.  This is known as the "Event loop".
		while (window.isOpen())
		{
        int arraySize = level * level;
        // check all the window's events that were triggered since the last iteration of the loop
				sf::Event event;
				while (window.pollEvent(event)) {
						// There was a "close requested" event, so we close the window
						if (event.type == sf::Event::Closed) { 
							window.close(); 
						}  	
				}

				// Create a new board.  This is done at the beginning of the game, or after successful completion
				// of a level, when all squares are the same color. 				
        int squareSize = WindowXSize / level ; 
        if( settingUpBoard == true) {
            int arraySize = level * level;
            int i = 0;
            for (int row = 0 ; row < level ; row++) {
              for( int col = 0 ; col < level ; col++) {
                  // Allocate each square individually.                  
                  char name[ 81];            // Store a string in each square which contains its number, in order of creation
                  sprintf( name, "%d", i);   // "print" the square creation order number into a string to be stored in the square
                  // storing the information of each square one by one 
                  squaresArray [i] = Square(squareSize, col * squareSize , row * squareSize , getRandomColor(), true, false, name);
                  squaresArray [0].setIsCaptured(true); // the first square is always captured
                  // checking whether an adjacent square is captured or not 
                  for (int j = 0 ; j < arraySize ; j++) {
                    if (squaresArray[j].getIsCaptured() == true) {
                      if (squaresArray[j].getYPosition() == squaresArray[j+1].getYPosition()) {
                        if (squaresArray[j].getColor() == squaresArray[j+1].getColor()) {
                          if (squaresArray[j+1].getIsCaptured() == false ) {
                            squaresArray[j+1].setIsCaptured(true);
                          }
                        }
                      }
                      if (squaresArray[j].getXPosition() == squaresArray[j+level].getXPosition()) {
                        if (squaresArray[j].getColor() == squaresArray[j+level].getColor()) {
                          if (squaresArray[j+level].getIsCaptured() == false ) {
                            squaresArray[j+level].setIsCaptured(true);
                          }
                        }
                      }  
                    }
                  }                   
                  i++;
              }            
            }		            
						settingUpBoard = false;    // Will be reset to true after level is complete
				}
			
				// Clear the window, erasing what is displayed
				window.clear();
      
				// Redraw all screen components to the background frame buffer
        int j = 0 ;
        for (int row = 0 ; row < level ; row++) {
          for( int col = 0 ; col < level ; col++) {
              // Draw the square
              window.draw( squaresArray[j].getTheSquare());
              j++;
          }        
        }
        int par = level * 2;      // the max move accepted for level up
        sprintf( aString, "(Par %d) Move %d", par, numberOfMoves);  // Make a string with mouse x,y values		
				// Display the coordinates for the mouse when the mouse left button is pressed
				if (sf::Mouse::isButtonPressed(sf::Mouse::Left) && !mouseIsAlreadyPressed)
				{
            // Set a flag to indicate mouse button has been pressed.  
						mouseIsAlreadyPressed = true;
            // Increment the number of moves each time mouse is clicked
					  numberOfMoves++;
            sf::Vector2i localPosition = sf::Mouse::getPosition(window);   // Vector2i stores x,y value
            // Using the mouse x,y position, find which square was clicked upon. Retrieve the color of the selected square
						int s = (localPosition.x / squareSize) + level * (localPosition.y / squareSize );
            // Setting captured squares to the selected color.          
            for (int i = 0 ; i < arraySize ; i++) {
              if (squaresArray[i].getIsCaptured() == true) {
                 squaresArray[i].setColor(squaresArray[s].getColor());
              }
            }
            
            // Go through the board and capture all adjacent squares of the selected color.
            while (true) {
              int numCaptured = 0;
              for (int i = 0 ; i < arraySize ; i++) { 
                if (squaresArray[i].getIsCaptured() == true) {
                  if (squaresArray[i].getYPosition() == squaresArray[i+1].getYPosition()) {
                    if (squaresArray[i].getColor() == squaresArray[i+1].getColor()) {
                      if (squaresArray[i+1].getIsCaptured() == false ) {
                        squaresArray[i+1].setIsCaptured(true);
                        numCaptured++;
                      } // right square
                    }
                  }
                  if (squaresArray[i].getYPosition() == squaresArray[i-1].getYPosition()) {
                    if (squaresArray[i].getColor() == squaresArray[i-1].getColor()) {
                      if (squaresArray[i-1].getIsCaptured() == false ) { 
                        squaresArray[i-1].setIsCaptured(true);
                        numCaptured++;
                      } // left square
                    } 
                  }
                  if (squaresArray[i].getXPosition() == squaresArray[i+level].getXPosition()) {
                    if (squaresArray[i].getColor() == squaresArray[i+level].getColor()) {
                      if (squaresArray[i+level].getIsCaptured() == false ) {
                        squaresArray[i+level].setIsCaptured(true);
                        numCaptured++;
                      } // down square
                    }
                  }  
                  if (squaresArray[i].getXPosition() == squaresArray[i-level].getXPosition()) {
                    if (squaresArray[i].getColor() == squaresArray[i-level].getColor()) {
                      if (squaresArray[i-level].getIsCaptured() == false ) {  
                        squaresArray[i-level].setIsCaptured(true);
                        numCaptured++;
                      } // up square
                    }
                  }
                } // end if square captured
              } // end for i < arraySize
              if (numCaptured == 0) { // to break out of this loop when there is no more adjacent squares to caprture
                break;
              }
            }     // end while true     
        }		// end if mouse is pressed	
				// Set mouse press status to false.  
				if (! sf::Mouse::isButtonPressed(sf::Mouse::Left) && mouseIsAlreadyPressed) {
						mouseIsAlreadyPressed = false;
				}			
				// Display previously constructed string at the bottom of the screen 
				messagesLabel.setString( aString);                    // Store the string into the messagesLabel
				window.draw( messagesLabel);                          // Display the messagesLabel			
				// Display the background frame buffer, replacing the previous RenderWindow frame contents.
				window.display();  
				
        // Check if squares are all the same color.  If they are, and the number of moves is within par,
				// then increment the level and indicate that we are again setting up the board.                
        int levelCounter = 0;       // counter to check for the win in each level
        for (int i = 0 ; i < arraySize ; i++) {
            if (squaresArray[i].getIsCaptured() == true) {
                levelCounter++;
            }
        } 
        if (levelCounter == arraySize) {
            if (numberOfMoves <= par) {
              if (level <= MaxBoardSize) {  
                level++;   // if all squares are captured within  par, level up
                numberOfMoves = 0;
              }
            }
            else {
                level = level; // if all squares are captured more than par, replay
                numberOfMoves = 0;
            }
            settingUpBoard = true;  // to remake the game            
        }      
		}//end while( window.isOpen())
		return 0;
}//end main()
